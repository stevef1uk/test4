// GENERATED FILE so do not edit or will be overwritten upon next generate
package data

import (
    "github.com/stevef1uk/test4/models"
    "github.com/stevef1uk/test4/restapi/operations"
    middleware "github.com/go-openapi/runtime/middleware"
    "github.com/gocql/gocql"
    "os"
    "log"
    "time"
     
)

func parseTime ( input string) time.Time {
    var ret time.Time
    if input == "" {
        ret = time.Now()
    } else {
        ret, _ = time.Parse( time.RFC3339, input )
    }
    return ret;
}

type Simple struct {
    Dummy string `cql:"dummy"`
}

type City struct {
    ID int `cql:"id"`
    Citycode string `cql:"citycode"`
    Cityname string `cql:"cityname"`
    TestInt int `cql:"test_int"`
    Lastupdatedat time.Time `cql:"lastupdatedat"`
    Myfloat float32 `cql:"myfloat"`
    Events []int `cql:"events"`
    Mymap models.CityMymap `cql:"mymap"`
    AddressList models.AddressList `cql:"address_list"`
}


var cassuservice_session *gocql.Session

func SetUp() {
  var err error
  log.Println("Tring to connect to Cassandra database using ", os.Getenv("CASSANDRA_SERVICE_HOST"))
  cluster := gocql.NewCluster(os.Getenv("CASSANDRA_SERVICE_HOST"))
  cluster.Keyspace = "demo"
  cluster.Consistency = gocql.One
  cassuservice_session, err = cluster.CreateSession()
  if ( err != nil ) {
    log.Fatal("Have you remembered to set the env var $CASSANDRA_SERVICE_HOST as connection to Cannandra failed with error = ", err)
  } else {
    log.Println("Yay! Connection to Cannandra established")
  }
}

func Stop() {
    log.Println("Shutting down the service handler")
  cassuservice_session.Close()
}

func Search(params operations.GetEmployeeParams) middleware.Responder {

    var ID int64
    _ = ID
    var AddressSet models.AddressSet
    _ = AddressSet
    var MyList models.MyList
    _ = MyList
    var Name string
    _ = Name
    var Mediate time.Time
    _ = Mediate
    var SecondTs time.Time
    _ = SecondTs
    var Tevents []int64
    _ = Tevents
    var Tmylist []float64
    _ = Tmylist
    var Tmymap []string
    _ = Tmymap
    _ = models.Employee{}

    codeGenRawTableResult := map[string]interface{}{}

    Mediate,_ = time.Parse(time.RFC3339,params.Mediate.String() ) 
    SecondTs,_ = time.Parse(time.RFC3339,params.SecondTs.String() ) 
    if err := cassuservice_session.Query(` SELECT id, address_set, my_list, name, mediate, second_ts, tevents, tmylist, tmymap FROM employee WHERE id = ? and mediate = ? and second_ts = ? `,params.ID,Mediate,SecondTs).Consistency(gocql.One).MapScan(codeGenRawTableResult); err != nil {
      log.Println("No data? ", err)
      return operations.NewGetEmployeeBadRequest()
    }
    payLoad := operations.NewGetEmployeeOK()
    payLoad.Payload = make([]*operations.GetEmployeeOKBodyItems0,1)
    payLoad.Payload[0] = new(operations.GetEmployeeOKBodyItems0)
    retParams := payLoad.Payload[0]
    tmp_ID_1 := codeGenRawTableResult["id"].(int)
    ID = int64(tmp_ID_1)
    retParams.ID = &ID
    tmp_City_2, ok := codeGenRawTableResult["address_set"].([]map[string]interface{})
    if ! ok {
      log.Fatal("handleReturnedVar() - failed to find entry for address_set", ok )
    }
    retParams.AddressSet = make([]*models.City, len(tmp_City_2))
    for i3, v3 := range tmp_City_2 {
    
      tmp_mymap_4 := v3["mymap"].(map[string]string)
      if v3["address_list"] == nil { 
          continue
      }
      tmp_address_list_6:= v3["address_list"].([]map[string]interface{})
      tmp_address_list_7:= make(models.CityAddressList, len(tmp_address_list_6) )
      
          for i4, v4 := range tmp_address_list_6 {
    
          tmp_Simple_8 := &Simple{
    
                v4["dummy"].(string),
              }
                
            tmp_address_list_7[i4] = &models.Simple{}
            tmp_address_list_7[i4].Dummy = tmp_Simple_8.Dummy
            }
      tmp_City_3 := &City{
    
          v3["id"].(int),
          v3["citycode"].(string),
          v3["cityname"].(string),
          v3["test_int"].(int),
          v3["lastupdatedat"].(time.Time),
          v3["myfloat"].(float32),
          v3["events"].([]int),
          tmp_mymap_4,
          tmp_address_list_7,
        }
          
      retParams.AddressSet[i3] = &models.City{}
      tmp_ID_9 := int64(tmp_City_3.ID)
      retParams.AddressSet[i3].ID = tmp_ID_9      
      retParams.AddressSet[i3].Citycode = tmp_City_3.Citycode      
      retParams.AddressSet[i3].Cityname = tmp_City_3.Cityname      
      tmp_TestInt_10 := int64(tmp_City_3.TestInt)
      retParams.AddressSet[i3].TestInt = tmp_TestInt_10      
      tmp_Lastupdatedat_11 := tmp_City_3.Lastupdatedat.String()
      retParams.AddressSet[i3].Lastupdatedat = tmp_Lastupdatedat_11      
      tmp_Myfloat_12 := float64(tmp_City_3.Myfloat)
      retParams.AddressSet[i3].Myfloat = tmp_Myfloat_12      
      retParams.AddressSet[i3].Events = make([] int64, len(tmp_City_3.Events) )
      for j := 0; j < len(tmp_City_3.Events ); j++ { 
        retParams.AddressSet[i3].Events[j] = int64(tmp_City_3.Events[j])
      }      
      retParams.AddressSet[i3].Mymap = tmp_City_3.Mymap      
      retParams.AddressSet[i3].AddressList = tmp_City_3.AddressList
      }
    tmp_Simple_13, ok := codeGenRawTableResult["my_list"].([]map[string]interface{})
    if ! ok {
      log.Fatal("handleReturnedVar() - failed to find entry for my_list", ok )
    }
    retParams.MyList = make([]*models.Simple, len(tmp_Simple_13))
    for i6, v6 := range tmp_Simple_13 {
    
      tmp_Simple_14 := &Simple{
    
          v6["dummy"].(string),
        }
          
      retParams.MyList[i6] = &models.Simple{}
      retParams.MyList[i6].Dummy = tmp_Simple_14.Dummy
      }
    tmp_Name_15 := codeGenRawTableResult["name"].(string)
    retParams.Name = &tmp_Name_15
    Mediate = codeGenRawTableResult["mediate"].(time.Time)
    tmp_Mediate_16 := Mediate.String()
    retParams.Mediate = &tmp_Mediate_16
    SecondTs = codeGenRawTableResult["second_ts"].(time.Time)
    tmp_SecondTs_17 := SecondTs.String()
    retParams.SecondTs = &tmp_SecondTs_17
    
    tmp_Tevents_18 := codeGenRawTableResult["tevents"].([]int)
    retParams.Tevents = make([] int64, len(tmp_Tevents_18) )
    for j := 0; j < len(tmp_Tevents_18 ); j++ { 
      retParams.Tevents[j] = int64(tmp_Tevents_18[j])
    }
    
    tmp_Tmylist_19 := codeGenRawTableResult["tmylist"].([]float32)
    retParams.Tmylist = make([] float64, len(tmp_Tmylist_19) )
    for j := 0; j < len(tmp_Tmylist_19 ); j++ { 
      retParams.Tmylist[j] = float64(tmp_Tmylist_19[j])
    }
    tmp_Tmymap_20, ok := codeGenRawTableResult["tmymap"].(map[string]string)
    if ! ok {
      log.Fatal("handleReturnedVar() - failed to find entry for tmymap", ok )
    }
    retParams.Tmymap = make(map[string]string,len(tmp_Tmymap_20))
    for i13, v := range tmp_Tmymap_20 {
      retParams.Tmymap[i13] = v
    }
    return operations.NewGetEmployeeOK().WithPayload( payLoad.Payload)
    }
